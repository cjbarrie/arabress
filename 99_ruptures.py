# -*- coding: utf-8 -*-
"""99_ruptures.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/122G1OcjYy8TLVULg6YSTisUego3qAN0r
"""

!pip install ruptures

import ruptures as rpt
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns  # for better aesthetics

# Set a style
sns.set_style("whitegrid")
plt.rcParams["font.size"] = 12

# ... [rest of your data loading and processing code]

# Filter for version '150000030k' before grouping
df = df[df['version'] == '150000030k']
grouped = df.groupby(['version', 'country'])


# Define the thresholds in descending order
thresholds = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]
colors = [
    'darkviolet', 'magenta', 'pink', 'lime', 'brown',
    'purple', 'red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'grey'
]

# Set up the grid for subplots
n = len(grouped)
cols = 5  # Change to 5 columns
rows = n // cols + (n % cols > 0)

fig, axes = plt.subplots(rows, cols, figsize=(25, 5 * rows), sharex=True, sharey=True)
fig.subplots_adjust(hspace=0.5, wspace=0.3)

if n == 1:
    axes = [axes]

# Update the line widths
line_widths = [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

for (ax, ((version, country), group)) in zip(axes.ravel(), grouped):
    signal = group['cos_sim'].values
    ax.plot(signal, label='cos_sim', color='black', alpha=0.6, lw=1)
    ax.set_title(f"{version} - {country}", pad=20)
    ax.tick_params(axis="both", which="major", labelsize=10)
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)

    for thresh, color, lw in zip(thresholds, colors, line_widths):
        algo = rpt.Pelt(model="rbf").fit(signal)
        result = algo.predict(pen=thresh)

        if len(result) > 0 and result[-1] == len(signal):
            result = result[:-1]

        for r in result:
            ax.axvline(x=r, color=color, linewidth=lw, label=f"pen={thresh}" if f"pen={thresh}" not in [l.get_label() for l in ax.get_lines()] else "")

# Put the legend outside of the plots
handles, labels = ax.get_legend_handles_labels()
fig.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.2, 1), fontsize=10)

plt.tight_layout()
plt.show()

fig.savefig("output_figure.png", dpi=300, bbox_inches='tight')

import ruptures as rpt
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns  # for better aesthetics

# Set a style
sns.set_style("whitegrid")
plt.rcParams["font.size"] = 12

# Load the data
df = pd.read_csv("test.csv")
df = df.dropna()

# Convert the 'yearwk' column to datetime and sort by it
df['yearwk'] = pd.to_datetime(df['yearwk'])
df = df.sort_values('yearwk')

# Filter for version '150000030k' before grouping
df = df[df['version'] == '150000030k']
grouped = df.groupby(['version', 'country'])

# Define the thresholds in descending order
thresholds = [65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5]
colors = [
    'darkviolet', 'magenta', 'pink', 'lime', 'brown',
    'purple', 'red', 'orange', 'yellow', 'green', 'cyan', 'blue', 'grey'
]

# Set up the grid for subplots
n = len(grouped)
cols = 5  # 5 columns
rows = n // cols + (n % cols > 0)

fig, axes = plt.subplots(rows, cols, figsize=(20, 5 * rows), sharex=True, sharey=True)
fig.subplots_adjust(hspace=0.5, wspace=0.3)

if n == 1:
    axes = [axes]

line_widths = [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

for (ax, ((version, country), group)) in zip(axes.ravel(), grouped):
    signal = group['cos_sim'].values

    # Plot the cos_sim values
    ax.plot(signal, label='cos_sim', color='black', alpha=0.6, lw=1)
    ax.set_title(f"{version} - {country}", pad=20)
    ax.tick_params(axis="both", which="major", labelsize=10)
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)

    change_point_counts = {}  # Dictionary to count occurrences of change points for each threshold
    for thresh, color, lw in zip(thresholds, colors, line_widths):
        algo = rpt.Pelt(model="rbf").fit(signal)
        result = algo.predict(pen=thresh)

        # Remove the last detected changepoint if it's at the end of the time series
        if len(result) > 0 and result[-1] == len(signal):
            result = result[:-1]

        # Count occurrences of each change point
        for r in result:
            change_point_counts[r] = change_point_counts.get(r, 0) + 1

        # Overlay the detected change points on the cos_sim signal
        for r in result:
            ax.axvline(x=r, color=color, linewidth=lw, label=f"pen={thresh}" if f"pen={thresh}" not in [l.get_label() for l in ax.get_lines()] else "")

    # Find and highlight the most likely change point
    if change_point_counts:
        most_likely_cp = max(change_point_counts, key=change_point_counts.get)
        ax.axvline(x=most_likely_cp, color='black', linestyle='--', linewidth=2)
        ax.text(most_likely_cp, ax.get_ylim()[1] * 0.95, 'Most Likely CP', rotation=90, verticalalignment='top')

# Remove any unused subplots
for i in range(n, rows * cols):
    fig.delaxes(axes.ravel()[i])

# Put the legend outside of the plots
handles, labels = ax.get_legend_handles_labels()
fig.legend(handles, labels, loc='upper right', bbox_to_anchor=(1.15, 1), fontsize=10)

plt.tight_layout()
plt.show()

