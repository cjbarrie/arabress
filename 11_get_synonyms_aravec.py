# -*- coding: utf-8 -*-
"""11_get_synonyms_aravec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iW8Uj1AAol7C2E66wq3nTQTZvr9mtwIC
"""

#from: https://github.com/bakrianoo/aravec/tree/master/AraVec%202.0

# -*- coding: utf8 -*-
import gensim
import re
import numpy as np
from nltk import ngrams
import pandas as pd

from utilities import * # import utilities.py module

# ============================
# ====== N-Grams Models ======

t_model = gensim.models.Word2Vec.load('data/models/wiki_cbow_300/wikipedia_cbow_300')

# opposition words
token = clean_str(u'معارضة').replace(" ", "_")

results_df = pd.DataFrame(columns=["score", "term"])


if token in t_model.wv:
    most_similar = t_model.wv.most_similar( token, topn=100 )
    for term, score in most_similar:
        term = clean_str(term).replace(" ", "_")
        if term != token:
            results_df.loc[len(results_df), ['term','score']] = term, score

results_df.to_csv("data/output/terms_opp.csv")

# support words
token = clean_str(u'الدعم').replace(" ", "_")

results_df = pd.DataFrame(columns=["score", "term"])


if token in t_model.wv:
    most_similar = t_model.wv.most_similar( token, topn=100 )
    for term, score in most_similar:
        term = clean_str(term).replace(" ", "_")
        if term != token:
            results_df.loc[len(results_df), ['term','score']] = term, score

results_df.to_csv("data/output/terms_sup.csv")

# then manually coded for relevance